source("~/Dropbox/work/bbtcomp/data-raw/DATASET.R")
use_mit_license()
devtools::load_all(".")
ll = read.csv("data-raw/ll.csv")
bbtcomp(ll)
lintr:::addin_lint()
devtools::load_all(".")
bbtcomp(ll)
use_r("mcmcbbt")
use_package("posterior")
use_package("tibble")
document()
use_r("data")
use_package("rlang")
where
use_package()
use_package("tidyselect")
document()
data(sl)
library(devtools)
load_all()
install.packages("testit")
install.packages("cmdstanr")
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
cmdstanr::install_cmdstan()
devtools::load_all()
data("sl")
data("ll")
data("ss")
dim(ll)
w1 = make_wintable(ll)
w1
m1 = bbtcomp(ll)
devtools::load_all()
m1 = bbtcomp(ll)
m1 = bbtcomp(ll)
devtools::load_all()
m1 = bbtcomp(ll)
m2 = bbtcomp(ll, lrope = F)
plot_pwin(m1, control = "rf")
plot_pwin(m1, selected = c("rf", "svm", "gbm"))
summary_pwin(m1)
summary_pwin(m1, selected = c("rf", "svm", "gbm"))
pcc(m1)
ppc(m1)
ppc_summary(m1)
ppc_summary(m2)
devtools::document()
library(bbtcomp)
data("ss")
library(devtools)
use_data("ss")
use_data("sl")
use_data("ll")
use_data()
use_data_raw()
usethis::use_data()
?use_data
install.packages("conflicted")
document()
devtools::document()
lintr:::addin_lint()
devtools::document()
devtools::use_r("waic_loo")
use_r("waic_loo")
usethis::use_r("waic_loo")
usethis::use_package(loo)
usethis::use_package("loo",type="Suggests")
devtools::document()
source("~/Dropbox/work/bbtcomp/R/make_wintable.R")
ss = read.csv("../irrelevance/ss.csv")
make_wintable(ss, lrope=F, deal_with_ties = "d")
library(usethis)
use_test()
library(dplyr)
ss = read.csv("ss.csv")
ssmean = ss %>% group_by(db) %>% summarise(across(everything(),mean))
ss = read.csv("ss.csv")
ssmean = ss %>% group_by(db) %>% summarise(across(everything(),mean))
ss = read.csv("tests/testthat/ss.csv")
ssmean = ss %>% group_by(db) %>% summarise(across(everything(),mean))
ssmean
ssmeanx = ssmeanx[-c(5,8,12,),]
ssmeanx = ssmean[-c(5,8,12,),]
ssmeanx = ssmean[-c(5,8,12),]
ssmeanx
make_wintable(ssmeanx)
w1 = make_wintable(ssmeanx)
w
w1
w1 = make_wintable(ssmeanx)
w1
make_wintable(ssmeanx, deal_with_ties = "r")
make_wintable(ssmeanx, deal_with_ties = "f")
w2=make_wintable(ssmeanx, deal_with_ties = "d")
w2$table==w2$table_pre
w2=make_wintable(ssmeanx, deal_with_ties = "f")
w2$table==w2$table_pre
w2=make_wintable(ssmeanx, deal_with_ties = "s")
w2$table==w2$table_pre
w2=make_wintable(ssmeanx, deal_with_ties = "r")
w2$table==w2$table_pre
names(w2)
make_wintable(ss[,-1], dbcol = 0)
amean = as.array(ssmean)
amean = array(ssmean)
amean
amean = as.array(ssmean[,-1])
amean = array(ssmean[,-1])
amean
aa = ssmeanx
colnames(aa)= NULL
aa
ssmeanx
aa = ssmeanx[,-1]
aa
as.array(aa)
colnames(aa) = NULL
aa
as.array(as.data.frame(aa))
array(as.data.frame(aa))
array(as.data.frame(aa), dim=c(17,5))
aa
aa = ssmeanx[,-1]
aa
aa = as.data.frame(ssmeanx[,-1])
aa
bb = as.matrix(aa)
bb
colnames(bb) <- NULL
bb
use_test()
debugSource("~/Dropbox/work/bbtcomp/R/make_wintable.R")
make_wintable(ss)
paired
lrope
lrope && paired
lrope & paired
devtools::document()
load_all()
devtools::load_all()
?expect_equivalent
usethis::use_package("loo")
devtools::document()
library(dplyr)
ss = read.csv(system.file("testdata","ss.csv", package = "bbtcomp"))
ssmean = ss %>% group_by(db) %>% summarise(across(everything(),mean))
sssd = ss %>% group_by(db) %>% summarise(across(everything(),sd))
write.csv(sssd,"inst/testdata/sssd.csv")
write.csv(ssmean,"inst/testdata/ssmean.csv")
head(sssd)
head(sssd[,-1])
make_wintable(amean, sssd[,-1], lrope=F, dbcol=0, paired=F)$table
amean = as.matrix(as.data.frame(ssmean)[,-1])
make_wintable(amean, sssd[,-1], lrope=F, dbcol=0, paired=F)$table
make_wintable(ss, lrope=F)$table
make_wintable(ss[,-1], dbcol = 0)
head(ssmeanx)
head(ssmean)
devtools::load_all()
ssmeanx = ssmean[-c(5,8,12),]
make_wintable(ssmeanx)
make_wintable(amean, sssd[,-1], lrope=F, dbcol=0, paired=F)$table
make_wintable(amean, sssd[,-1], lrope=F, dbcol=0, paired=F)
debug(make_wintable)
make_wintable(amean, sssd[,-1], lrope=F, dbcol=0, paired=F)
tabx
class(tabx)
dbcol
names
tabsd
tabx
make_wintable(amean, sssd[,-1], lrope=F, dbcol=0, paired=F)
lrope
dbcol
out
compute_differences_no_sd(tabx)
debug(compute_differences_no_sd)
compute_differences_no_sd(tabx)
meanx
meanx[,1]
meanx[,1, drop= TRUE]
j
meanx[,j, drop= TRUE]
delta
win1
make_wintable(ss[,-1], dbcol = 0)
out
devtools::load_all()
make_wintable(ss[,-1], dbcol = 0)
amean
sssd[,-1]
make_wintable(amean, sssd[,-1], lrope=F, dbcol=0, paired=F)$table
make_wintable(ss, lrope=F)$table
make_wintable(ssmean[,-1], sssd[,-1], lrope=T, dbcol=0,, paired=F)$table
make_wintable(ss, lrope=T, paired = F)$table
make_wintable(ssmean[,-1], sssd[,-1], dbcol=0,lrope=T, lrope_value = 0.3, paired=F)$table
make_wintable(ss, lrope=T, paired = F, lrope_value = 0.3)$table
make_wintable(ssmean[,-1], sssd[,-1], dbcol=0,lrope=T, deal_with_ties = "d", paired=F)$table
make_wintable(ss, lrope=T, paired = F, deal_with_ties = "d")$table
make_wintable(amean, sssd[,-1], dbcol=0,lrope=T, deal_with_ties = "f", paired=F)$table
make_wintable(ss, lrope=T, paired = F, deal_with_ties = "f")$table
library(bbtcomp)
source("~/Dropbox/work/bbtcomp/R/helper_f1.R")
make_wintable(ssmeanx)
debug(make_wintable)
make_wintable(ssmeanx)
tabx
dbcol
names
lintr:::addin_lint()
make_wintable(ssmeanx)
ssmeanx
source("~/Dropbox/work/bbtcomp/R/helper_f1.R")
w1 = make_wintable(ssmeanx)
ssmeanx
ss = read.csv(system.file("testdata","ss.csv", package = "bbtcomp"))
ssmean = read.csv(system.file("testdata","ssmean.csv", package = "bbtcomp"))
head(ssmean)
head(ss)
source("~/Dropbox/work/bbtcomp/R/helper_f1.R")
head(ssmean)
library(bbtcomp)
ssmean = read.csv(system.file("testdata","ssmean.csv", package = "bbtcomp"),header = TRUE)
ssmean
w1 = make_wintable(ssmeanx)
ssmeanx = ssmean[-c(5,8,12),]
ssmeanx
w1 = make_wintable(ssmeanx)
w6 = make_wintable(ssmeanx, lrope=F, deal_with_ties = "r")
w1$table_pre
w2$table_pre
w6$table_pre
ssmeanx
ssmeanx = ssmean[-c(3,5,8,12),]
w1 = make_wintable(ssmeanx)
w1$table_pre
ssmeanx
ssmeanx = ssmean[-c(3,5,8,12, 20),]
w1 = make_wintable(ssmeanx)
w1$table_pre
ssmeanx
ssmeanx = ssmean[-c(3,5,7,8,12, 20),]
w1 = make_wintable(ssmeanx)
w1$table_pre
source("~/Dropbox/work/bbtcomp/R/helper_f1.R")
mm = matrix(ll[, -1])
colnames(mm)
mm
ll
mm = as.matrix(ll[,-1])
head(mm)
library(bbtcomp)
remotes::install_github("jwainer/bbtcomp)
")
remotes::install_github("jwainer/bbtcomp")
library(bbtcomp)
ll
head(hh)
head(ll)
bb
head(ll,8)
dim(ll)
528/4
ss <- ll[1:80, 1:6]
x <- bbtcomp(ss)
x
names(x)
type(x)
class(x)
lapply(x, class)
summary_pwin(x)
plot_pwin(x)
convergence_check(x)
y = bbtcomp(ss,lrope = T, paired=T)
z = bbtcomp(ss,lrope = T, paired=F)
print_wintable(x$wintable)
print_wintable(y$wintable)
print_wintable(z$wintable)
print_wintable(make_wintable(ss,deal_with_ties = "d")
)
print_wintable(make_wintable(ss,deal_with_ties = "d",lrope = T))
print_wintable(make_wintable(ss,deal_with_ties = "d",lrope = T,paired = T))
library(devtools)
use_r(bbtcomp)
use_test("bbtcomp")
library(bbtcomp)
library(bbtcomp)
?bbtcomp
library(bbtcomp)
?bbtcomp
library(bbtcomp)
m = bbtcomp(ss)
ss <- ll[1:80, 1:6]
m = bbtcomp(ss)
convergence_check(m)
m2 = bbtcomp(ss. cleandir = F)
m2 = bbtcomp(ss, cleandir = F)
convergence_check(m2)
convergence_check(m)
ppc_summary(m)
ppc(m)
names(m)
m$log_lik
m$davidson
print_wintable(m$wintable)
as.logical(0)
as.logical(1)
parallel::detectCores()
parallel::detectCores()
a = tempdir()
a
names(m)
library(testthat)
m1 <- bbtcomp(ss, lrope = T)
(expect_true(is_bbt_model(m1)))
(expect_output(summary_pwin(m1)))
summary_pwin(m1)
a = summary_pwin(m1)
a
expect_output(m1)
expect_output(print(m1))
(expect_output(plot_pwin(m1)))
expect_output(plot_pwin(m1))
expect_output(print(plot_pwin(m1)))
plot_pwin(m1)
dim(a)
expect_equal(dim(summary_pwin(m1)),c(10,5))
plot_pwin(m1)-> b
b
type(b)
class(b)
is.list(m1)
length(m1)
ppc(m1)
class(ppcd(m1))
class(ppc(m1))
class(plot_pwin(m1)
)
class(ppc(m1))
p = ppc_summary(m1)
p
dim(p)
expect_type(m1,list)
expect_type(m1,"list")
expect_type(b,"list")
expect_type(plot_pwin(m1),"gg")
expect_class(plot_pwin(m1),"gg")
expect_s3_class(plot_pwin(m1),"gg")
expect_s4_class(plot_pwin(m1),"gg")
expect_s3_class(plot_pwin(m1),"gg")
expect_s3_class(plot_pwin(m1),"ggplot")
expect_s3_class(ppc(m1),"ggplot")
expect_s3_class(plot_pwin(m1),"ggplot")
class(summary_pwin(m1))
get_waic(m1)
convergence_check(m1)
remove.packages("bbtcomp")
library(bbtcomp)
m1 = bbtcomp(ss)
m1 = bbtcomp(ss)
m1 = bbtcomp(ss)
library(bbtcomp)
ss <- ll[1:80, 1:6]
wintable <- make_wintable(ss, lrope = FALSE)
m1 <- mcmcbbt(wintable)
options(mc.cores = parallel::detectCores(logical = FALSE))
library(bbtcomp)
options(mc.cores = parallel::detectCores(logical = FALSE))
ss <- ll[1:80, 1:6]
wintable <- make_wintable(ss, lrope = FALSE)
wintable
table_wintable(wintable)
m1 = bbtcomp(ss)
m1$wintable
#' w2 <- make_wintable(ll, lrope = FALSE)
#' table_wintable(w2)
#'
#' w3 <- make_wintable(ll, lrope_value = 0.3)
#' table_wintable(w3)
#'
#' w4 <- make_wintable(ll, deal_with_ties = "random", paired = FALSE)
#' table_wintable(w4)
#'
#'}
table_wintable <- function(tablex, which="pos") {
if (which=="both") {
t1 <- table_wintable(tablex,which="pos")
t2 <- table_wintable(tablex,which="pre")
tt = cbind(t1, t20,-c(1,2))
return(tt)
}
if (which=="pos")  sums <- tablex$table else  sums <- tablex$table_pre
names <- tablex$alg_names
a <- data.frame(
alg1 = names[sums$pi],
alg2 = names[sums$pj],
win1 = sums$win1,
win2 = sums$win2)
if ("ties" %in% colnames(sums)) a <- cbind(a, ties = sums$ties)
return(a)
}
table_wintable(wintable)
table_wintable(wintable, which="pre")
table_wintable(wintable, which="both")
#' w2 <- make_wintable(ll, lrope = FALSE)
#' table_wintable(w2)
#'
#' w3 <- make_wintable(ll, lrope_value = 0.3)
#' table_wintable(w3)
#'
#' w4 <- make_wintable(ll, deal_with_ties = "random", paired = FALSE)
#' table_wintable(w4)
#'
#'}
table_wintable <- function(tablex, which="pos") {
if (which=="both") {
t1 <- table_wintable(tablex,which="pos")
t2 <- table_wintable(tablex,which="pre")
tt = cbind(t1, t2[,-c(1,2)])
return(tt)
}
if (which=="pos")  sums <- tablex$table else  sums <- tablex$table_pre
names <- tablex$alg_names
a <- data.frame(
alg1 = names[sums$pi],
alg2 = names[sums$pj],
win1 = sums$win1,
win2 = sums$win2)
if ("ties" %in% colnames(sums)) a <- cbind(a, ties = sums$ties)
return(a)
}
table_wintable(wintable, which="both")
all(c(0,0,0,0)==0)
!all(c(1,0,0,0)==0)
#' w2 <- make_wintable(ll, lrope = FALSE)
#' table_wintable(w2)
#'
#' w3 <- make_wintable(ll, lrope_value = 0.3)
#' table_wintable(w3)
#'
#' w4 <- make_wintable(ll, deal_with_ties = "random", paired = FALSE)
#' table_wintable(w4)
#'
#'}
table_wintable <- function(tablex, which="pos") {
if (which=="both") {
t1 <- table_wintable(tablex,which="pos")
t2 <- table_wintable(tablex,which="pre")
tt = cbind(t1, t2[,-c(1,2)])
return(tt)
}
if (which=="pos")  sums <- tablex$table else  sums <- tablex$table_pre
names <- tablex$alg_names
a <- data.frame(
alg1 = names[sums$pi],
alg2 = names[sums$pj],
win1 = sums$win1,
win2 = sums$win2)
if ("ties" %in% colnames(sums) & !all(sums$ties==0)) a <- cbind(a, ties = sums$ties)
return(a)
}
table_wintable(wintable)
table_wintable(wintable, which="pre")
table_wintable(wintable, which="both")
library(bbtcomp)
library(cmdstanr)
install_cmdstan()
check_cmdstan_toolchain(fix = TRUE, quiet = TRUE)
check_cmdstan_toolchain()
cmdstan_path()
install.packages(c("commonmark", "gtable", "htmlwidgets", "pillar", "ps", "tibble", "vctrs"))
option(bbtcomp.dir="~/Downloads/zz")
options(bbtcomp.dir="~/Downloads/zz")
getOption("bbtcomp.dir",default = tempdir())
file.exists("~/Downloads/zz")
library(bbtcomp)
install.packages(c("blob", "bookdown", "broom", "cli", "commonmark", "dbplyr", "distributional", "dplyr", "dtplyr", "googledrive", "googlesheets4", "gtable", "Hmisc", "hms", "htmltools", "htmlwidgets", "MASS", "modelr", "openssl", "pillar", "posterior", "ps", "rlang", "rmarkdown", "survival", "testthat", "tibble", "vctrs", "xfun"))
install.packages(c("cli", "distributional", "dplyr", "htmltools", "rmarkdown", "xfun"))
?var
devtools::load_all("~/Dropbox/work/bbtcomp/")
options(bbtcomp.dir = "~/Downloads/.bbtcomp")
options(mc.cores = parallel::detectCores(logical = FALSE))
ss <- ll[1:80, 1:6]
x <- bbtcomp(ss)
tt = x$wintable
table_wintable(tt)
table_wintable(tt,which="pre")
table_wintable(tt,which="both")
table_wintable(tt,which="pre")
ss
get_loo(x)
convergence_check(x)
get_loo(x)
get_waic(x)
table_wintable(x$wintable)
table_wintable(x$wintable, which = "pre")
table_wintable(x$wintable, which = "both")
install.packages(c("dplyr", "fontawesome", "gargle", "ggplot2", "interp", "lattice", "loo", "markdown", "MASS", "Matrix", "multcompView", "processx", "ps", "quantreg", "tinytex", "vctrs", "xfun", "zip"))
a = read.csv("https://www.ic.unicamp.br/~wainer/cursos/1s2023/metodologia/ex2-nonpaired.csv")
a
aa = subset(a,type=="Yes")
aa
bb = subset(a,type=="No")
t.test(aa$bp, bb$bp)
install.packages("BEST")
y1 <- c(5.77, 5.33, 4.59, 4.33, 3.66, 4.48)
y2 <- c(3.88, 3.55, 3.29, 2.59, 2.33, 3.59)
library(BEST)
install.packages(c("bookdown", "cachem", "checkmate", "class", "evaluate", "fs", "Hmisc", "httpuv", "httr", "httr2", "KernSmooth", "later", "MASS", "nnet", "profvis", "rlang", "sass", "testthat", "tzdb", "viridis", "viridisLite", "vroom", "waldo", "xml2"))
install.packages(c("class", "jsonlite", "KernSmooth", "knitr", "MASS", "Matrix", "nnet", "rmarkdown", "sys", "usethis"))
install.packages(c("broom", "bslib", "curl", "pkgbuild", "testthat", "vctrs"))
